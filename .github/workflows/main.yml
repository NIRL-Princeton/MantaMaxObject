name: Release

on:
  create:
    tags:
      - v*
  workflow_dispatch:


jobs:
  package:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:
        os: [macos-latest, windows-latest]
        config: [release]
        include:
          - os: macos-latest
            release_suffix: mac
          - os: windows-latest
            release_suffix: windows

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: '0'

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7
  
    # - uses: GuillaumeFalourd/setup-windows10-sdk-action@v2    

  

    - name: Import Certificates (macOS)
      if: matrix.os == 'macos-latest' 
      uses: sudara/basic-macos-keychain-action@main
      id: keychain
      with:
        dev-id-app-cert: ${{ secrets.DEV_ID_APP_CERT }}
        dev-id-app-password: ${{ secrets.DEV_ID_APP_PASSWORD }}
        # dev-id-installer-cert: ${{ secrets.DEV_ID_INSTALLER_CERT }
        # dev-id-installer-password: ${{ secrets.DEV_ID_INSTALLER_PASS }}}   
        


    - name: add msbuild to path
      if: matrix.os == 'windows-latest'
      uses: microsoft/setup-msbuild@v2
     
    - name: configure_macos
      if: matrix.os == 'macos-latest'
      run: mkdir build && cd build && cmake -G Xcode .. "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64" 
 
    - name: configure_windows
      if: matrix.os == 'windows-latest'
      run: mkdir build && cd build && cmake  ..

    - name: build_release
      if: matrix.config == 'release'
      run: cmake --build build --config 'Release'

    - name: package_windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      env:
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
        SUFFIX: ${{matrix.release_suffix}}
        GITHUB_CONFIG: ${{ matrix.config }}
      run: |
        set PACKAGE_NAME=%GITHUB_REPOSITORY_NAME%
        mkdir %PACKAGE_NAME%_%SUFFIX%
       
        if exist extensions cp -r extensions %PACKAGE_NAME%_%SUFFIX%
        if exist externals cp -r externals %PACKAGE_NAME%_%SUFFIX%
        if exist support cp -r support %PACKAGE_NAME%_%SUFFIX%
        if exist tests cp -r tests %PACKAGE_NAME%_%SUFFIX%
   

    # - name: test
    #   run: cd build && ctest -C ${{ matrix.config }} . -V
    - name: Codesign (macOS)
      if: matrix.os == 'macos-latest' 
      run: |
        # Each plugin must be code signed
   
        
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "externals/min.manta.mxo" --deep --strict --options=runtime --timestamp
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "help/min.manta.maxhelp" --deep --strict --options=runtime --timestamp
    - name: package_macos
      if: matrix.os == 'macos-latest'
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_SHA: ${{ github.sha }}
        SUFFIX: ${{matrix.release_suffix}}
        GITHUB_CONFIG: ${{ matrix.config }}
      run: |
        PACKAGE_NAME=`echo $GITHUB_REPOSITORY | sed 's/.*\///g'`
        PACKAGE_REV=`echo $GITHUB_SHA | sed -e 's/^[[:alnum:]]\{7\}/&-/g' | sed 's/-.*//'`
        PACKAGE_CONFIG=`echo $GITHUB_CONFIG`
        mkdir -p ${PACKAGE_NAME}_${SUFFIX}
         ls
        if [ -d externals ]; then cp -r externals ${PACKAGE_NAME}_${SUFFIX}; fi
        if [ -d help ]; then cp -r help ${PACKAGE_NAME}_${SUFFIX}; fi
        if [ -e $PACKAGE_NAME/ReadMe-Public.md ]; then rm -f ${PACKAGE_NAME}_${SUFFIX}/ReadMe.md; mv ${PACKAGE_NAME}_${SUFFIX}/ReadMe-Public.md ${PACKAGE_NAME}_${SUFFIX}/ReadMe.md; fi

   
    # - name: Create DMG, Notarize and Staple (macOS)
    #   if: matrix.os == 'macos-latest' 
    #   run: |
    #     # npm install -g appdmg
    #     # mkdir -p packaging/dmg
        
    #     # # Create directories for the dmg symlinks
    #     # sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3
    #     # # ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
    #     # # ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
    #     # # mv "${{ env.ARTIFACTS_PATH }}/VST3/${{ env.PRODUCT_NAME }}.vst3" packaging/dmg
    #     # # mv "${{ env.ARTIFACTS_PATH }}/AU/${{ env.PRODUCT_NAME }}.component" packaging/dmg
        
    #     # # Run appdmg to create the .dmg
    #     # #cd packaging && appdmg dmg.json "${{ env.ARTIFACT_NAME}}.dmg"
    #     # #codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i ${{ env.BUNDLE_ID }} --force "${{ env.ARTIFACT_NAME }}.dmg"
    #     # #xcrun notarytool submit "${{ env.ARTIFACT_NAME }}.dmg" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
    #     # #xcrun stapler staple "${{ env.ARTIFACT_NAME }}.dmg"
    
    

        
    - name: upload 
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.short-sha.outputs.sha }}-${{ matrix.config }}-${{matrix.release_suffix}}
        path: ${{ github.event.repository.name }}_${{matrix.release_suffix}}
    
  zip:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: package
    strategy:
      fail-fast: false 
      matrix:
        os: [macos-latest, windows-latest]
        config: [release]
        include:
          - os: macos-latest
            release_suffix: mac
          - os: windows-latest
            release_suffix: windows

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        fetch-depth: '0'
        
    - uses: battila7/get-version-action@v2
      id: get_version

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - uses: actions/download-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.short-sha.outputs.sha }}-release-${{matrix.release_suffix}}
        path: ${{ github.event.repository.name }}_${{matrix.release_suffix}}
    
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ${{ github.event.repository.name }}_${{matrix.release_suffix}}

    - name: zip
      run: zip -r ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}-${{matrix.release_suffix}}.zip ${{ github.event.repository.name }}_${{matrix.release_suffix}}

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release-${{matrix.release_suffix}}
        path: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}-${{matrix.release_suffix}}.zip
  release:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: zip
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
        fetch-depth: '0'
        
    - uses: battila7/get-version-action@v2
      id: get_version

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - name: download mac
      uses: actions/download-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release-mac
        path: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}-mac.zip

    - name: download windows
      uses: actions/download-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release-windows
        path: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}-windows.zip
    - name: test
      run: |
        ls
        cd MantaMaxObject-package-for-max-v0.0.40-mac.zip
        ls
    - uses: ncipollo/release-action@v1
      with:
        artifacts: "${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}-mac.zip/${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release-mac, ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}-windows.zip/${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release-windows"
        body: "Max Package for all supported platforms"
        token: ${{ secrets.GITHUB_TOKEN }}
