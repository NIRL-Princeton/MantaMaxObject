name: Release

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:

jobs:
  package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        config: [release]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        fetch-depth: '0'

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - name: configure_macos
      if: matrix.os == 'macos-latest'
      run: mkdir build && cd build && cmake -G Xcode .. "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"
 
    - name: configure_windows
      if: matrix.os == 'windows-latest'
      run: mkdir build && cd build && cmake ..

    - name: build_debug
      if: matrix.config == 'debug'
      run: cmake --build build --config 'Debug'

    - name: build_release
      if: matrix.config == 'release'
      run: cmake -DMAX_SDK_CODESIGN_EXTERNS=1 --build build --config 'Release'
      
    - name: Import Certificates (macOS)
      uses: apple-actions/import-codesign-certs@v3 # only exists as a tag right now
      if: matrix.os == 'macos-latest'
      with:
        p12-file-base64: ${{ secrets.BUILD_CERTIFICATES_BASE64 }}
        p12-password: ${{ secrets.P12_PASSWORD }}

    # - name: test
    #   run: cd build && ctest -C ${{ matrix.config }} . -V

  
    
   
    - name: Codesign (macOS)
      working-directory: build
      if: ${{ matrix.name == 'macOS' }}
      run: |
        # Each plugin must be code signed
        codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "build/" --deep --strict --options=runtime --timestamp
       # codesign --force -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" -v "${{ env.AU_PATH }}" --deep --strict --options=runtime --timestamp
    - name: Create DMG, Notarize and Staple (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        npm install -g appdmg
        mkdir -p packaging/dmg
        
        # Create directories for the dmg symlinks
        sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3
        # ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
        # ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
        # mv "${{ env.ARTIFACTS_PATH }}/VST3/${{ env.PRODUCT_NAME }}.vst3" packaging/dmg
        # mv "${{ env.ARTIFACTS_PATH }}/AU/${{ env.PRODUCT_NAME }}.component" packaging/dmg
        
        # Run appdmg to create the .dmg
        #cd packaging && appdmg dmg.json "${{ env.ARTIFACT_NAME}}.dmg"
        #codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i ${{ env.BUNDLE_ID }} --force "${{ env.ARTIFACT_NAME }}.dmg"
        #xcrun notarytool submit "${{ env.ARTIFACT_NAME }}.dmg" --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        #xcrun stapler staple "${{ env.ARTIFACT_NAME }}.dmg"
  release:
    runs-on: ubuntu-latest
    needs: package

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
        fetch-depth: '0'
        
    - uses: battila7/get-version-action@v2
      id: get_version

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - uses: actions/download-artifact@v2
      with:
        name: ${{ github.event.repository.name }}-${{ steps.short-sha.outputs.sha }}-release
        path: ${{ github.event.repository.name }}
    
    - name: Display structure of downloaded files
      run: ls -R
      working-directory: ${{ github.event.repository.name }}

    - name: zip
      run: zip -r ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}.zip ${{ github.event.repository.name }}

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release
        path: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}.zip

    - uses: ncipollo/release-action@v1
      with:
        artifacts: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}.zip
        body: "Max Package for all supported platforms"
        token: ${{ secrets.GITHUB_TOKEN }}
